@model PostDetailModel

<div class="posts-card card text-center mb-3 h-100 shadow">
	<div class="card-header ">
		<a class="d-flex align-items-center" href="@Url.Action("Details", "User", new { id = Model.Username })">
			<div class="post-profile d-flex justify-content-center">
				<img class="h-100" src="/img/user/profile/@Model.UserPhoto" alt="Alternate Text" />
			</div>
			@Model.Username
		</a>
		@{
			if (Model.CanInteract && !Model.IsOwned)
			{
				<button class="follow-user ms-2" data-username="@Model.Username"><i class="fa-solid @Model.FriendStatus fa-lg"></i></button>
			}
		}
	</div>
	<div class="card-body">
		<div class="card-content">
			<h5 class="card-title">@Model.NoteTitle</h5>
			<p class="card-text">@Model.NoteContent</p>
		</div>
		<div class="card-theme">@Model.ThemeName</div>
	</div>
	<div class="card-footer d-flex justify-content-between text-body-secondary">
		<span class="rate text-white fw-bold">★ @Model.PostRate.ToString("0.00")</span>
		@{
			if (Model.CanInteract)
			{
				<div class="post-interactions">
					<button class="like-post" data-post-id="@Model.PostID"><i class="fa-solid fa-thumbs-up fa-xl @Model.Liked"></i></button>
					<button class="share-post"><i class="fa-solid fa-share fa-xl" style="color: #ece1ff;"></i></button>
					<button class="report-post"><i class="fa-solid fa-flag fa-xl" style="color: #FFE482;"></i></button>
				</div>

			}
		}
		<span class="date text-white fw-bold">@GetTimeAgo(Model.PostDate)</span>

	</div>
</div>

@functions {
	public string GetTimeAgo(DateTime date)
	{
		TimeSpan elapsedTime = DateTime.Now - date;

		if (elapsedTime < TimeSpan.FromHours(1))
			return elapsedTime.Minutes + "m" + " Ago";
		if (elapsedTime < TimeSpan.FromHours(24))
			return elapsedTime.Hours + "h" + " Ago";
		if (elapsedTime < TimeSpan.FromDays(7))
			return elapsedTime.Days + "d" + " Ago";
		if (elapsedTime < TimeSpan.FromDays(28))
			return elapsedTime.Days / 7 + "w" + " Ago";
		if (elapsedTime < TimeSpan.FromDays(356))
			return elapsedTime.Days / 28 + "mo" + " Ago";

		return elapsedTime.Days / 365 + "y" + " Ago";


	}
}